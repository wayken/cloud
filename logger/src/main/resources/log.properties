# 日志名称
log.name=LogForJ
# 配置日志输出级别，等级可分为off、fatal、error、warn、info、debug
log.level=info
# 配置输出端是哪种类型，可以是console（控制台），file（文件），database（数据库）
log.appender=console

# 配置指定打印信息的具体格式，要配合file和console一起，
# %m 输出代码中指定的消息
# %p 输出优先级，即debug，info，warn，error，fatal
# %P 输出优先级，字符大写，即DEBUG，DEBUG，INFO，WARN，ERROR，FATAL
# %c 输出所属的类目，通常就是所在类的路径简写+类名全写，示例：c.a.l.LogHandler
# %C 输出所属的类目，通常就是所在类的全名
# %M 输出日志所在方法名
# %N 输出日志名称，一般用于每个项目统一日志名称输出方便通过日志区分业务，例如httpsite/httpgame
# %e 输出异常信息
# %E 输出异常信息，连同类包所在路径和版本也输出
# %h 输出产生该日志事件的线程名
# %i 输出产生该日志事件的线程ID
# %I 输出产生该日志事件的进程ID
# %n 输出一个回车换行符，Windows平台为"rn”，Unix平台为"n”
# %d 输出日志时间点的日期或时间，默认格式为{yyyy-MM-dd HH:mm:ss}，也可以在其后指定格式，比如：%d{yyyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921
# %l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数
# %L 输出产生该日志事件代码中的行数
# %F 输出所属的类文件名
# %-10.40m 输出消息时最少字符是10，不足时自动补充空格，最大字符是40，超出时自动截取并以...结尾，-为表示补齐空格是插在字符前面还是后面
log.format=[Log] [%P] [%I] <%N:%h:%i>%l %m%n

# 指定输出文件名，要配合file一起，可以在其后指定格式并按不同日期文件创建，比如：{yyyy-MM-dd}.log，输出文件类似2013-05-05.log
log.file=log/file{yyyy-MM-dd}.log

# 数据库日志输出渠道配置，要配合database
# 数据库驱动
log.driver=com.mysql.jdbc.Driver
# 数据库url
log.url=jdbc:mysql://localhost:3306/log4j?useUnicode=true&characterEncoding=UTF-8
# 数据库用户名
log.user=root
# 数据库密码
log.password=root
# 插入数据库SQL语句，形式等同log.format
log.sql=insert into logtable (date, message) VALUES ('%d{yyyy-MM-dd hh\:mm\:ss}', '%m')
