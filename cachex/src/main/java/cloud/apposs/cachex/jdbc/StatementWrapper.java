package cloud.apposs.cachex.jdbc;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;
import java.util.concurrent.atomic.AtomicBoolean;

/**
 * JDBC Statement包装类
 */
public class StatementWrapper implements Statement {
	/** 
	 * 当前Statement是否被关闭，即被调用{@link #close()}方法
	 * 此时真正Statement并未被真正关闭，只是逻辑意义上的关闭
	 * 在下次从Connection连接创建时仍然可用
	 */
	protected AtomicBoolean logicallyClosed = new AtomicBoolean(false);
	
	protected ConnectionWrapper connection;
	
	private Statement statement;
	
	/** 与当前Statement绑定的SQL语句 */
	private String sql;
	
	/** 被缓存的键值 */
	private String cacheKey;
	
	/** 当前Statement是否已经被缓存 */
	public volatile boolean cached = false;
	
	public StatementWrapper(ConnectionWrapper connection, Statement statement) {
		this(connection, statement, null, null);
	}
	
	public StatementWrapper(ConnectionWrapper connection, Statement statement, String sql, String cacheKey) {
		if (connection == null || statement == null) {
			throw new NullPointerException();
		}
		this.connection = connection;
		this.statement = statement;
		this.sql = sql;
		this.cacheKey = cacheKey;
	}
	
	public String getSql() {
		return sql;
	}

	public String getCacheKey() {
		return cacheKey;
	}
	
	protected void checkClosed() throws SQLException {
		if (logicallyClosed.get()) {
			throw new SQLException("Statement is closed");
		}
	}
	
	/**
	 * 激活Statement，在从缓存中取出Statement时调用此方法
	 */
	protected void active() {
		logicallyClosed.set(false);
	}
	
	private void closeStatement() throws SQLException {
		logicallyClosed.set(true);
		// 如果未开启Statement缓存则直接关闭原始Statement
		if (!cached){
			statement.close();
		}
	}
	
	@Override
	public void addBatch(String sql) throws SQLException {
		checkClosed();
		try{
			statement.addBatch(sql);
		} catch (SQLException e) {
			throw connection.markInvalid(e);
		}
	}

	@Override
	public void cancel() throws SQLException {
		checkClosed();
		try{
			statement.cancel();
		} catch (SQLException e) {
			throw connection.markInvalid(e);
		}
	}

	@Override
	public void clearBatch() throws SQLException {
		checkClosed();
		try{
			statement.clearBatch();
		} catch (SQLException e) {
			throw connection.markInvalid(e);
		}
	}

	@Override
	public void clearWarnings() throws SQLException {
		checkClosed();
		try{
			statement.clearWarnings();
		} catch (SQLException e) {
			throw connection.markInvalid(e);
		}
	}

	@Override
	public void close() throws SQLException {
		closeStatement();
	}

	@Override
	public boolean execute(String sql) throws SQLException {
		boolean result = false;
		checkClosed();
		try {
			result = statement.execute(sql);
		} catch (SQLException e) {
			throw connection.markInvalid(e);
		}
		return result;
	}

	@Override
	public boolean execute(String sql, int autoGeneratedKeys)
			throws SQLException {
		boolean result = false;
		checkClosed();
		try{
			result = statement.execute(sql, autoGeneratedKeys);
		} catch (SQLException e) {
			throw connection.markInvalid(e);
		}
		return result;
	}

	@Override
	public boolean execute(String sql, int[] columnIndexes) throws SQLException {
		boolean result = false;
		checkClosed();
		try {
			result = statement.execute(sql, columnIndexes);
		} catch (SQLException e) {
			throw connection.markInvalid(e);
		}
		return result;
	}

	@Override
	public boolean execute(String sql, String[] columnNames)
			throws SQLException {
		boolean result = false;
		checkClosed();
		try{
			result = statement.execute(sql, columnNames);
		} catch (SQLException e) {
			throw connection.markInvalid(e);
		}
		return result;
	}

	@Override
	public int[] executeBatch() throws SQLException {
		int[] result = null;
		checkClosed();
		try{
			result = statement.executeBatch();
		} catch (SQLException e) {
			throw connection.markInvalid(e);
		}
		return result;
	}

	@Override
	public ResultSet executeQuery(String sql) throws SQLException {
		ResultSet result = null;
		checkClosed();
		try{
			result = statement.executeQuery(sql);
		} catch (SQLException e) {
			throw connection.markInvalid(e);
		}
		return result;
	}

	@Override
	public int executeUpdate(String sql) throws SQLException {
		int result = 0;
		checkClosed();
		try{
			result = statement.executeUpdate(sql);
		} catch (SQLException e) {
			throw connection.markInvalid(e);
		}
		return result;
	}

	@Override
	public int executeUpdate(String sql, int autoGeneratedKeys)
			throws SQLException {
		int result = 0;
		checkClosed();
		try{
			result = statement.executeUpdate(sql, autoGeneratedKeys);
		} catch (SQLException e) {
			throw connection.markInvalid(e);
		}
		return result;
	}

	@Override
	public int executeUpdate(String sql, int[] columnIndexes)
			throws SQLException {
		int result = 0;
		checkClosed();
		try{
			result = statement.executeUpdate(sql, columnIndexes);
		} catch (SQLException e) {
			throw connection.markInvalid(e);
		}
		return result;
	}

	@Override
	public int executeUpdate(String sql, String[] columnNames)
			throws SQLException {
		int result = 0;
		checkClosed();
		try{
			result = statement.executeUpdate(sql, columnNames);
		} catch (SQLException e) {
			throw connection.markInvalid(e);
		}
		return result;
	}

	@Override
	public Connection getConnection() throws SQLException {
		checkClosed();
		return connection;
	}

	@Override
	public int getFetchDirection() throws SQLException {
		int result = 0;
		checkClosed();
		try{
			result = statement.getFetchDirection();
		} catch (SQLException e) {
			throw connection.markInvalid(e);
		}
		return result; 
	}

	@Override
	public int getFetchSize() throws SQLException {
		int result = 0;
		checkClosed();
		try{
			result = statement.getFetchSize();
		} catch (SQLException e) {
			throw connection.markInvalid(e);
		}
		return result;
	}

	@Override
	public ResultSet getGeneratedKeys() throws SQLException {
		ResultSet result = null;
		checkClosed();
		try{
			result = statement.getGeneratedKeys();
		} catch (SQLException e) {
			throw connection.markInvalid(e);
		}
		return result;
	}

	@Override
	public int getMaxFieldSize() throws SQLException {
		int result = 0;
		checkClosed();
		try{
			result = statement.getMaxFieldSize();
		} catch (SQLException e) {
			throw connection.markInvalid(e);
		}
		return result;
	}

	@Override
	public int getMaxRows() throws SQLException {
		int result = 0;
		checkClosed();
		try{
			result = statement.getMaxRows();
		} catch (SQLException e) {
			throw connection.markInvalid(e);
		}
		return result;
	}

	@Override
	public boolean getMoreResults() throws SQLException {
		boolean result = false;
		checkClosed();
		try{
			result = statement.getMoreResults();
		} catch (SQLException e) {
			throw connection.markInvalid(e);
		}
		return result;
	}

	@Override
	public boolean getMoreResults(int current) throws SQLException {
		boolean result = false;
		checkClosed();
		try{
			result = statement.getMoreResults(current);
		} catch (SQLException e) {
			throw connection.markInvalid(e);
		}
		return result;
	}

	@Override
	public int getQueryTimeout() throws SQLException {
		int result = 0;
		checkClosed();
		try{
			result = statement.getQueryTimeout();
		} catch (SQLException e) {
			throw connection.markInvalid(e);
		}
		return result;
	}

	@Override
	public ResultSet getResultSet() throws SQLException {
		ResultSet result = null;
		checkClosed();
		try{
			result = statement.getResultSet();
		} catch (SQLException e) {
			throw connection.markInvalid(e);
		}
		return result;
	}

	@Override
	public int getResultSetConcurrency() throws SQLException {
		int result = 0;
		checkClosed();
		try{
			result = statement.getResultSetConcurrency();
		} catch (SQLException e) {
			throw connection.markInvalid(e);
		}
		return result;
	}

	@Override
	public int getResultSetHoldability() throws SQLException {
		int result = 0;
		checkClosed();
		try{
			result = statement.getResultSetHoldability();
		} catch (SQLException e) {
			throw connection.markInvalid(e);
		}
		return result;
	}

	@Override
	public int getResultSetType() throws SQLException {
		int result = 0;
		checkClosed();
		try{
			result = statement.getResultSetType();
		} catch (SQLException e) {
			throw connection.markInvalid(e);
		}
		return result;
	}

	@Override
	public int getUpdateCount() throws SQLException {
		int result = 0;
		checkClosed();
		try{
			result = statement.getUpdateCount();
		} catch (SQLException e) {
			throw connection.markInvalid(e);
		}
		return result;
	}

	@Override
	public SQLWarning getWarnings() throws SQLException {
		SQLWarning result = null;
		checkClosed();
		try{
			result = statement.getWarnings();
		} catch (SQLException e) {
			throw connection.markInvalid(e);
		}
		return result;
	}

	@Override
	public boolean isClosed() throws SQLException {
		return logicallyClosed.get();
	}

	@Override
	public boolean isPoolable() throws SQLException {
		boolean result = false;
		checkClosed();
		try{
			result = statement.isPoolable();
		} catch (SQLException e) {
			throw connection.markInvalid(e);
		}
		return result;
	}

	@Override
	public void closeOnCompletion() throws SQLException {
		checkClosed();
		try{
			statement.closeOnCompletion();
		} catch (SQLException e) {
			throw connection.markInvalid(e);
		}
	}

	@Override
	public boolean isCloseOnCompletion() throws SQLException {
		boolean result = false;
		checkClosed();
		try{
			result = statement.isCloseOnCompletion();
		} catch (SQLException e) {
			throw connection.markInvalid(e);
		}
		return result;
	}

	@Override
	public void setCursorName(String name) throws SQLException {
		checkClosed();
		try{
			statement.setCursorName(name);
		} catch (SQLException e) {
			throw connection.markInvalid(e);
		}
	}

	@Override
	public void setEscapeProcessing(boolean enable) throws SQLException {
		checkClosed();
		try{
			statement.setEscapeProcessing(enable);
		} catch (SQLException e) {
			throw connection.markInvalid(e);
		}
	}

	@Override
	public void setFetchDirection(int direction) throws SQLException {
		checkClosed();
		try{
			statement.setFetchDirection(direction);
		} catch (SQLException e) {
			throw connection.markInvalid(e);
		}
	}

	@Override
	public void setFetchSize(int rows) throws SQLException {
		checkClosed();
		try{
			statement.setFetchSize(rows);
		} catch (SQLException e) {
			throw connection.markInvalid(e);
		}
	}

	@Override
	public void setMaxFieldSize(int max) throws SQLException {
		checkClosed();
		try{
			statement.setMaxFieldSize(max);
		} catch (SQLException e) {
			throw connection.markInvalid(e);
		}
	}

	@Override
	public void setMaxRows(int max) throws SQLException {
		checkClosed();
		try{
			statement.setMaxRows(max);
		} catch (SQLException e) {
			throw connection.markInvalid(e);
		}
	}

	@Override
	public void setPoolable(boolean poolable) throws SQLException {
		checkClosed();
		try{
			statement.setPoolable(poolable);
		} catch (SQLException e) {
			throw connection.markInvalid(e);
		}
	}

	@Override
	public void setQueryTimeout(int seconds) throws SQLException {
		checkClosed();
		try{
			statement.setQueryTimeout(seconds);
		} catch (SQLException e) {
			throw connection.markInvalid(e);
		}
	}

	@Override
	public boolean isWrapperFor(Class<?> iface) throws SQLException {
		boolean result = false;
		try{
			result = statement.isWrapperFor(iface);
		} catch (SQLException e) {
			throw connection.markInvalid(e);
		}
		return result;
	}

	@Override
	public <T> T unwrap(Class<T> iface) throws SQLException {
		T result = null;
		try {
			result = statement.unwrap(iface);
		} catch (SQLException e) {
			throw connection.markInvalid(e);
		}
		return result;
	}
}
