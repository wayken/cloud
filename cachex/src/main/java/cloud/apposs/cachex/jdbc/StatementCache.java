package cloud.apposs.cachex.jdbc;

import java.sql.SQLException;
import java.util.concurrent.ConcurrentHashMap;

/**
 * JDBC Statement缓存
 */
public class StatementCache {
	private ConcurrentHashMap<String, StatementWrapper> caches = 
		new ConcurrentHashMap<String, StatementWrapper>();
	
	/** 最多缓存多少个Statement实例 */
	private int cacheSize;
	
	public static final String CACHE_KEY_EMPTY = "empty";
	
	public StatementCache(int cacheSize) {
		if (cacheSize < 0) {
			throw new IllegalArgumentException();
		}
		this.cacheSize= cacheSize;
	}
	
	/**
	 * 根据{@code key}从缓存获取对应的Statement，若不存在或者该Statement已经关闭则返回null
	 * 
	 * @param key
	 * @return
	 */
	public StatementWrapper get(String key) {
		StatementWrapper statement = caches.get(key);
		
		if (statement != null) {
			statement.active();
		}
		
		return statement;
	}
	
	public StatementWrapper get(String sql, int autoGeneratedKeys) {
		return get(calculateCacheKey(sql, autoGeneratedKeys));
	}
	
	public StatementWrapper get(String sql, int resultSetType, int resultSetConcurrency) {
		return get(calculateCacheKey(sql, resultSetType, resultSetConcurrency));
	}
	
	public StatementWrapper get(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) {
		return get(calculateCacheKey(sql, resultSetType, resultSetConcurrency, resultSetHoldability));
	}
	
	public StatementWrapper get(String sql, int[] columnIndexes) {
		return get(calculateCacheKey(sql, columnIndexes));
	}
	
	public StatementWrapper get(String sql, String[] columnNames) {
		return get(calculateCacheKey(sql, columnNames));
	}
	
	/**
	 * 在不存在对应key的情况添加Statement
	 * <pre>
	 * if (!map.containsKey(key)) {
	 *     return map.put(key, value);
	 * } else {
	 *     return map.get(key);
	 * }
	 * </pre>
	 * 
	 * @param key
	 * @param statement
	 */
	public void putIfAbsent(String key, StatementWrapper statement) {
		if (caches.size() <= cacheSize && key != null) { 
			if (caches.putIfAbsent(key, statement) == null) {
				statement.cached = true;
			}
		}
	}
	
	/**
	 * 清除所有Statement缓存
	 */
	public void clear() {
		for (StatementWrapper statement: caches.values()) {
			try {
				if (!statement.isClosed()) {
					statement.close();
				}
			} catch (SQLException e) {
			}
		}
		caches.clear();
	}
	
	/** ==================== 计算CacheKey ==================== */
	
	public String calculateCacheKey(String sql, int autoGeneratedKeys) {
		StringBuilder tmp = new StringBuilder(sql.length()+4);
		tmp.append(sql);
		tmp.append(autoGeneratedKeys);
		return tmp.toString();
	}
	
	public String calculateCacheKey(int resultSetType, int resultSetConcurrency){
		StringBuilder tmp = new StringBuilder(20);
		tmp.append("T");
		tmp.append(resultSetType);
		tmp.append(", C");
		tmp.append(resultSetConcurrency);
		return tmp.toString();
	}
	
	public String calculateCacheKey(String sql, int resultSetType, int resultSetConcurrency){
		StringBuilder tmp = new StringBuilder(sql.length()+20);
		tmp.append(sql);
		tmp.append(", T");
		tmp.append(resultSetType);
		tmp.append(", C");
		tmp.append(resultSetConcurrency);
		return tmp.toString();
	}
	
	public String calculateCacheKey(int resultSetType, int resultSetConcurrency, int resultSetHoldability) {
		StringBuilder tmp = new StringBuilder(20);
		tmp.append("T");
		tmp.append(resultSetType);
		tmp.append(", C");
		tmp.append(resultSetConcurrency);
		tmp.append(", H:");
		tmp.append(resultSetHoldability);
		return tmp.toString();
	}
	
	public String calculateCacheKey(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability){
		StringBuilder tmp = new StringBuilder(sql.length()+20);
		tmp.append(sql);
		tmp.append(", T");
		tmp.append(resultSetType);
		tmp.append(", C");
		tmp.append(resultSetConcurrency);
		tmp.append(", H:");
		tmp.append(resultSetHoldability);
		return tmp.toString();
	}
	
	public String calculateCacheKey(String sql, int[] columnIndexes) {
		StringBuilder tmp = new StringBuilder(sql.length()+4);
		tmp.append(sql);
		for (int i=0; i < columnIndexes.length; i++){
			tmp.append(columnIndexes[i]);
			tmp.append("CI,");
		}
		return tmp.toString();
	}
	
	public String calculateCacheKey(String sql, String[] columnNames) {
		StringBuilder tmp = new StringBuilder(sql.length()+4);
		tmp.append(sql);
		for (int i=0; i < columnNames.length; i++){
			tmp.append(columnNames[i]);
			tmp.append("CN,");
		}
		return tmp.toString();
	}
}
